import { join } from 'path'
import { createBot, createProvider, createFlow, addKeyword, utils } from '@builderbot/bot'
import { MemoryDB as Database } from '@builderbot/bot'
import { BaileysProvider as Provider } from '@builderbot/provider-baileys'

const PORT = process.env.PORT ?? 3008

/** ------------------ Flujos ------------------ */

const discordFlow = addKeyword('doc')
  .addAction(async (ctx, { provider, flowDynamic }) => {
    const jid = getJid(ctx)
    await withTyping(provider, jid, async () => {
      await flowDynamic([
        'You can see the documentation here',
        'ðŸ“„ https://builderbot.app/docs',
      ].join('\n'))
    })
  })
  .addAnswer(
    'Do you want to continue? *yes*',
    { capture: true },
    async (ctx, { gotoFlow, flowDynamic }) => {
      if (ctx.body.toLocaleLowerCase().includes('yes')) {
        return gotoFlow(registerFlow)
      }
      await flowDynamic('Thanks!')
      return
    }
  )

const welcomeFlow = addKeyword(['hi', 'hello', 'hola'])
  .addAction(async (ctx, { provider, flowDynamic }) => {
    const jid = getJid(ctx)
    await withTyping(provider, jid, async () => {
      await flowDynamic('ðŸ™Œ Hello welcome to this *Chatbot*')
    })
  })
  .addAction(async (ctx, { provider, flowDynamic }) => {
    const jid = getJid(ctx)
    await withTyping(provider, jid, async () => {
      await flowDynamic([
        'I share with you the following links of interest about the project',
        'ðŸ‘‰ *doc* to view the documentation',
      ].join('\n'))
    })
  })
  .addAnswer(
    'Type *doc* to continue',
    { delay: 800, capture: true },
    async (ctx, { fallBack }) => {
      if (!ctx.body.toLocaleLowerCase().includes('doc')) {
        return fallBack('You should type *doc*')
      }
      return
    },
    [discordFlow]
  )

const registerFlow = addKeyword(utils.setEvent('REGISTER_FLOW'))
  .addAction(typingStart)
  .addAnswer('What is your name?', { capture: true }, async (ctx, { state, provider }) => {
    await state.update({ name: ctx.body })
    await typingStop(ctx, { provider })
  })
  .addAction(typingStart)
  .addAnswer('What is your age?', { capture: true }, async (ctx, { state, provider }) => {
    await state.update({ age: ctx.body })
    await typingStop(ctx, { provider })
  })
  .addAction(async (ctx, { flowDynamic, state, provider }) => {
    const jid = getJid(ctx)
    await withTyping(provider, jid, async () => {
      await flowDynamic(`${state.get('name')}, thanks for your information!: Your age: ${state.get('age')}`)
    })
  })

const fullSamplesFlow = addKeyword(['samples', utils.setEvent('SAMPLES')])
  .addAction(async (ctx, { provider, flowDynamic }) => {
    const jid = getJid(ctx)
    await withTyping(provider, jid, async () => {
      await flowDynamic(`ðŸ’ª I'll send you a lot files...`)
    })
  })
  .addAnswer(`Send image from Local`, { media: join(process.cwd(), 'assets', 'sample.png') })
  .addAnswer(`Send video from URL`, {
    media: 'https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExYTJ0ZGdjd2syeXAwMjQ4aWdkcW04OWlqcXI3Ynh1ODkwZ25zZWZ1dCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/LCohAb657pSdHv0Q5h/giphy.mp4',
  })
  .addAnswer(`Send audio from URL`, { media: 'https://cdn.freesound.org/previews/728/728142_11861866-lq.mp3' })
  .addAnswer(`Send file from URL`, {
    media: 'https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf',
  })

/** ------------------ Bootstrap ------------------ */
const main = async () => {
  const adapterFlow = createFlow([welcomeFlow, registerFlow, fullSamplesFlow])
  const adapterProvider = createProvider(Provider)
  const adapterDB = new Database()

  const { handleCtx, httpServer } = await createBot({
    flow: adapterFlow,
    provider: adapterProvider,
    database: adapterDB,
  })

  adapterProvider.server.post(
    '/v1/messages',
    handleCtx(async (bot, req, res) => {
      const { number, message, urlMedia } = req.body
      await bot.sendMessage(number, message, { media: urlMedia ?? null })
      return res.end('sended')
    })
  )

  adapterProvider.server.post(
    '/v1/register',
    handleCtx(async (bot, req, res) => {
      const { number, name } = req.body
      await bot.dispatch('REGISTER_FLOW', { from: number, name })
      return res.end('trigger')
    })
  )

  adapterProvider.server.post(
    '/v1/samples',
    handleCtx(async (bot, req, res) => {
      const { number, name } = req.body
      await bot.dispatch('SAMPLES', { from: number, name })
      return res.end('trigger')
    })
  )

  adapterProvider.server.post(
    '/v1/blacklist',
    handleCtx(async (bot, req, res) => {
      const { number, intent } = req.body
      if (intent === 'remove') bot.blacklist.remove(number)
      if (intent === 'add') bot.blacklist.add(number)

      res.writeHead(200, { 'Content-Type': 'application/json' })
      return res.end(JSON.stringify({ status: 'ok', number, intent }))
    })
  )

  httpServer(+PORT)
}

main()
